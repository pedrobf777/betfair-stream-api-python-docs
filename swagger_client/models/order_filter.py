# coding: utf-8

"""
    Betfair: Exchange Streaming API

    API to receive streamed updates. This is an ssl socket connection of CRLF delimited json messages (see RequestMessage & ResponseMessage)

    OpenAPI spec version: 1.0.1423
    Contact: bdp@betfair.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class OrderFilter(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, include_overall_position=None, account_ids=None, customer_strategy_refs=None, partition_matched_by_strategy_ref=None):
        """
        OrderFilter - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'include_overall_position': 'bool',
            'account_ids': 'list[int]',
            'customer_strategy_refs': 'list[str]',
            'partition_matched_by_strategy_ref': 'bool'
        }

        self.attribute_map = {
            'include_overall_position': 'includeOverallPosition',
            'account_ids': 'accountIds',
            'customer_strategy_refs': 'customerStrategyRefs',
            'partition_matched_by_strategy_ref': 'partitionMatchedByStrategyRef'
        }

        self._include_overall_position = include_overall_position
        self._account_ids = account_ids
        self._customer_strategy_refs = customer_strategy_refs
        self._partition_matched_by_strategy_ref = partition_matched_by_strategy_ref

    @property
    def include_overall_position(self):
        """
        Gets the include_overall_position of this OrderFilter.
        Returns overall / net position (See: OrderRunnerChange.mb / OrderRunnerChange.ml). Default=true

        :return: The include_overall_position of this OrderFilter.
        :rtype: bool
        """
        return self._include_overall_position

    @include_overall_position.setter
    def include_overall_position(self, include_overall_position):
        """
        Sets the include_overall_position of this OrderFilter.
        Returns overall / net position (See: OrderRunnerChange.mb / OrderRunnerChange.ml). Default=true

        :param include_overall_position: The include_overall_position of this OrderFilter.
        :type: bool
        """

        self._include_overall_position = include_overall_position

    @property
    def account_ids(self):
        """
        Gets the account_ids of this OrderFilter.
        Internal use only & should not be set on your filter (your subscription is already locked to your account). If set subscription will fail.

        :return: The account_ids of this OrderFilter.
        :rtype: list[int]
        """
        return self._account_ids

    @account_ids.setter
    def account_ids(self, account_ids):
        """
        Sets the account_ids of this OrderFilter.
        Internal use only & should not be set on your filter (your subscription is already locked to your account). If set subscription will fail.

        :param account_ids: The account_ids of this OrderFilter.
        :type: list[int]
        """

        self._account_ids = account_ids

    @property
    def customer_strategy_refs(self):
        """
        Gets the customer_strategy_refs of this OrderFilter.
        Restricts to specified customerStrategyRefs; this will filter orders and StrategyMatchChanges accordingly (Note: overall postition is not filtered)

        :return: The customer_strategy_refs of this OrderFilter.
        :rtype: list[str]
        """
        return self._customer_strategy_refs

    @customer_strategy_refs.setter
    def customer_strategy_refs(self, customer_strategy_refs):
        """
        Sets the customer_strategy_refs of this OrderFilter.
        Restricts to specified customerStrategyRefs; this will filter orders and StrategyMatchChanges accordingly (Note: overall postition is not filtered)

        :param customer_strategy_refs: The customer_strategy_refs of this OrderFilter.
        :type: list[str]
        """

        self._customer_strategy_refs = customer_strategy_refs

    @property
    def partition_matched_by_strategy_ref(self):
        """
        Gets the partition_matched_by_strategy_ref of this OrderFilter.
        Returns strategy positions (See: OrderRunnerChange.smc=Map<customerStrategyRef, StrategyMatchChange>) - these are sent in delta format as per overall position. Default=false

        :return: The partition_matched_by_strategy_ref of this OrderFilter.
        :rtype: bool
        """
        return self._partition_matched_by_strategy_ref

    @partition_matched_by_strategy_ref.setter
    def partition_matched_by_strategy_ref(self, partition_matched_by_strategy_ref):
        """
        Sets the partition_matched_by_strategy_ref of this OrderFilter.
        Returns strategy positions (See: OrderRunnerChange.smc=Map<customerStrategyRef, StrategyMatchChange>) - these are sent in delta format as per overall position. Default=false

        :param partition_matched_by_strategy_ref: The partition_matched_by_strategy_ref of this OrderFilter.
        :type: bool
        """

        self._partition_matched_by_strategy_ref = partition_matched_by_strategy_ref

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
