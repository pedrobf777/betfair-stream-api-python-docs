# coding: utf-8

"""
    Betfair: Exchange Streaming API

    API to receive streamed updates. This is an ssl socket connection of CRLF delimited json messages (see RequestMessage & ResponseMessage)

    OpenAPI spec version: 1.0.1423
    Contact: bdp@betfair.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class AllRequestTypesExample(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, op_types=None, heartbeat=None, order_subscription_message=None, market_subscription=None, authentication=None):
        """
        AllRequestTypesExample - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'op_types': 'str',
            'heartbeat': 'HeartbeatMessage',
            'order_subscription_message': 'OrderSubscriptionMessage',
            'market_subscription': 'MarketSubscriptionMessage',
            'authentication': 'AuthenticationMessage'
        }

        self.attribute_map = {
            'op_types': 'opTypes',
            'heartbeat': 'heartbeat',
            'order_subscription_message': 'orderSubscriptionMessage',
            'market_subscription': 'marketSubscription',
            'authentication': 'authentication'
        }

        self._op_types = op_types
        self._heartbeat = heartbeat
        self._order_subscription_message = order_subscription_message
        self._market_subscription = market_subscription
        self._authentication = authentication

    @property
    def op_types(self):
        """
        Gets the op_types of this AllRequestTypesExample.


        :return: The op_types of this AllRequestTypesExample.
        :rtype: str
        """
        return self._op_types

    @op_types.setter
    def op_types(self, op_types):
        """
        Sets the op_types of this AllRequestTypesExample.


        :param op_types: The op_types of this AllRequestTypesExample.
        :type: str
        """
        allowed_values = ["heartbeat", "authentication", "marketSubscription", "orderSubscription"]
        if op_types not in allowed_values:
            raise ValueError(
                "Invalid value for `op_types` ({0}), must be one of {1}"
                .format(op_types, allowed_values)
            )

        self._op_types = op_types

    @property
    def heartbeat(self):
        """
        Gets the heartbeat of this AllRequestTypesExample.


        :return: The heartbeat of this AllRequestTypesExample.
        :rtype: HeartbeatMessage
        """
        return self._heartbeat

    @heartbeat.setter
    def heartbeat(self, heartbeat):
        """
        Sets the heartbeat of this AllRequestTypesExample.


        :param heartbeat: The heartbeat of this AllRequestTypesExample.
        :type: HeartbeatMessage
        """

        self._heartbeat = heartbeat

    @property
    def order_subscription_message(self):
        """
        Gets the order_subscription_message of this AllRequestTypesExample.


        :return: The order_subscription_message of this AllRequestTypesExample.
        :rtype: OrderSubscriptionMessage
        """
        return self._order_subscription_message

    @order_subscription_message.setter
    def order_subscription_message(self, order_subscription_message):
        """
        Sets the order_subscription_message of this AllRequestTypesExample.


        :param order_subscription_message: The order_subscription_message of this AllRequestTypesExample.
        :type: OrderSubscriptionMessage
        """

        self._order_subscription_message = order_subscription_message

    @property
    def market_subscription(self):
        """
        Gets the market_subscription of this AllRequestTypesExample.


        :return: The market_subscription of this AllRequestTypesExample.
        :rtype: MarketSubscriptionMessage
        """
        return self._market_subscription

    @market_subscription.setter
    def market_subscription(self, market_subscription):
        """
        Sets the market_subscription of this AllRequestTypesExample.


        :param market_subscription: The market_subscription of this AllRequestTypesExample.
        :type: MarketSubscriptionMessage
        """

        self._market_subscription = market_subscription

    @property
    def authentication(self):
        """
        Gets the authentication of this AllRequestTypesExample.


        :return: The authentication of this AllRequestTypesExample.
        :rtype: AuthenticationMessage
        """
        return self._authentication

    @authentication.setter
    def authentication(self, authentication):
        """
        Sets the authentication of this AllRequestTypesExample.


        :param authentication: The authentication of this AllRequestTypesExample.
        :type: AuthenticationMessage
        """

        self._authentication = authentication

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
