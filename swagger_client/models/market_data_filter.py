# coding: utf-8

"""
    Betfair: Exchange Streaming API

    API to receive streamed updates. This is an ssl socket connection of CRLF delimited json messages (see RequestMessage & ResponseMessage)

    OpenAPI spec version: 1.0.1423
    Contact: bdp@betfair.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class MarketDataFilter(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, ladder_levels=None, fields=None):
        """
        MarketDataFilter - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'ladder_levels': 'int',
            'fields': 'list[str]'
        }

        self.attribute_map = {
            'ladder_levels': 'ladderLevels',
            'fields': 'fields'
        }

        self._ladder_levels = ladder_levels
        self._fields = fields

    @property
    def ladder_levels(self):
        """
        Gets the ladder_levels of this MarketDataFilter.


        :return: The ladder_levels of this MarketDataFilter.
        :rtype: int
        """
        return self._ladder_levels

    @ladder_levels.setter
    def ladder_levels(self, ladder_levels):
        """
        Sets the ladder_levels of this MarketDataFilter.


        :param ladder_levels: The ladder_levels of this MarketDataFilter.
        :type: int
        """

        self._ladder_levels = ladder_levels

    @property
    def fields(self):
        """
        Gets the fields of this MarketDataFilter.


        :return: The fields of this MarketDataFilter.
        :rtype: list[str]
        """
        return self._fields

    @fields.setter
    def fields(self, fields):
        """
        Sets the fields of this MarketDataFilter.


        :param fields: The fields of this MarketDataFilter.
        :type: list[str]
        """
        allowed_values = ["EX_BEST_OFFERS_DISP", "EX_BEST_OFFERS", "EX_ALL_OFFERS", "EX_TRADED", "EX_TRADED_VOL", "EX_LTP", "EX_MARKET_DEF", "SP_TRADED", "SP_PROJECTED"]
        if fields not in allowed_values:
            raise ValueError(
                "Invalid value for `fields` ({0}), must be one of {1}"
                .format(fields, allowed_values)
            )

        self._fields = fields

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
