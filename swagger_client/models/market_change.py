# coding: utf-8

"""
    Betfair: Exchange Streaming API

    API to receive streamed updates. This is an ssl socket connection of CRLF delimited json messages (see RequestMessage & ResponseMessage)

    OpenAPI spec version: 1.0.1423
    Contact: bdp@betfair.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class MarketChange(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, rc=None, img=None, tv=None, con=None, market_definition=None, id=None):
        """
        MarketChange - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'rc': 'list[RunnerChange]',
            'img': 'bool',
            'tv': 'float',
            'con': 'bool',
            'market_definition': 'MarketDefinition',
            'id': 'str'
        }

        self.attribute_map = {
            'rc': 'rc',
            'img': 'img',
            'tv': 'tv',
            'con': 'con',
            'market_definition': 'marketDefinition',
            'id': 'id'
        }

        self._rc = rc
        self._img = img
        self._tv = tv
        self._con = con
        self._market_definition = market_definition
        self._id = id

    @property
    def rc(self):
        """
        Gets the rc of this MarketChange.
        Runner Changes - a list of changes to runners (or null if un-changed)

        :return: The rc of this MarketChange.
        :rtype: list[RunnerChange]
        """
        return self._rc

    @rc.setter
    def rc(self, rc):
        """
        Sets the rc of this MarketChange.
        Runner Changes - a list of changes to runners (or null if un-changed)

        :param rc: The rc of this MarketChange.
        :type: list[RunnerChange]
        """

        self._rc = rc

    @property
    def img(self):
        """
        Gets the img of this MarketChange.
        Image - replace existing prices / data with the data supplied: it is not a delta (or null if delta)

        :return: The img of this MarketChange.
        :rtype: bool
        """
        return self._img

    @img.setter
    def img(self, img):
        """
        Sets the img of this MarketChange.
        Image - replace existing prices / data with the data supplied: it is not a delta (or null if delta)

        :param img: The img of this MarketChange.
        :type: bool
        """

        self._img = img

    @property
    def tv(self):
        """
        Gets the tv of this MarketChange.
        The total amount matched across the market. This value is truncated at 2dp (or null if un-changed)

        :return: The tv of this MarketChange.
        :rtype: float
        """
        return self._tv

    @tv.setter
    def tv(self, tv):
        """
        Sets the tv of this MarketChange.
        The total amount matched across the market. This value is truncated at 2dp (or null if un-changed)

        :param tv: The tv of this MarketChange.
        :type: float
        """

        self._tv = tv

    @property
    def con(self):
        """
        Gets the con of this MarketChange.
        Conflated - have more than a single change been combined (or null if not conflated)

        :return: The con of this MarketChange.
        :rtype: bool
        """
        return self._con

    @con.setter
    def con(self, con):
        """
        Sets the con of this MarketChange.
        Conflated - have more than a single change been combined (or null if not conflated)

        :param con: The con of this MarketChange.
        :type: bool
        """

        self._con = con

    @property
    def market_definition(self):
        """
        Gets the market_definition of this MarketChange.
        Market Definition - the definition of the market (or null if un-changed)

        :return: The market_definition of this MarketChange.
        :rtype: MarketDefinition
        """
        return self._market_definition

    @market_definition.setter
    def market_definition(self, market_definition):
        """
        Sets the market_definition of this MarketChange.
        Market Definition - the definition of the market (or null if un-changed)

        :param market_definition: The market_definition of this MarketChange.
        :type: MarketDefinition
        """

        self._market_definition = market_definition

    @property
    def id(self):
        """
        Gets the id of this MarketChange.
        Market Id - the id of the market

        :return: The id of this MarketChange.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this MarketChange.
        Market Id - the id of the market

        :param id: The id of this MarketChange.
        :type: str
        """

        self._id = id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
