# coding: utf-8

"""
    Betfair: Exchange Streaming API

    API to receive streamed updates. This is an ssl socket connection of CRLF delimited json messages (see RequestMessage & ResponseMessage)

    OpenAPI spec version: 1.0.1423
    Contact: bdp@betfair.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class OrderChangeMessage(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, op=None, id=None, ct=None, clk=None, heartbeat_ms=None, pt=None, oc=None, initial_clk=None, conflate_ms=None, segment_type=None, status=None):
        """
        OrderChangeMessage - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'op': 'str',
            'id': 'int',
            'ct': 'str',
            'clk': 'str',
            'heartbeat_ms': 'int',
            'pt': 'int',
            'oc': 'list[OrderMarketChange]',
            'initial_clk': 'str',
            'conflate_ms': 'int',
            'segment_type': 'str',
            'status': 'int'
        }

        self.attribute_map = {
            'op': 'op',
            'id': 'id',
            'ct': 'ct',
            'clk': 'clk',
            'heartbeat_ms': 'heartbeatMs',
            'pt': 'pt',
            'oc': 'oc',
            'initial_clk': 'initialClk',
            'conflate_ms': 'conflateMs',
            'segment_type': 'segmentType',
            'status': 'status'
        }

        self._op = op
        self._id = id
        self._ct = ct
        self._clk = clk
        self._heartbeat_ms = heartbeat_ms
        self._pt = pt
        self._oc = oc
        self._initial_clk = initial_clk
        self._conflate_ms = conflate_ms
        self._segment_type = segment_type
        self._status = status

    @property
    def op(self):
        """
        Gets the op of this OrderChangeMessage.
        The operation type

        :return: The op of this OrderChangeMessage.
        :rtype: str
        """
        return self._op

    @op.setter
    def op(self, op):
        """
        Sets the op of this OrderChangeMessage.
        The operation type

        :param op: The op of this OrderChangeMessage.
        :type: str
        """

        self._op = op

    @property
    def id(self):
        """
        Gets the id of this OrderChangeMessage.
        Client generated unique id to link request with response (like json rpc)

        :return: The id of this OrderChangeMessage.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this OrderChangeMessage.
        Client generated unique id to link request with response (like json rpc)

        :param id: The id of this OrderChangeMessage.
        :type: int
        """

        self._id = id

    @property
    def ct(self):
        """
        Gets the ct of this OrderChangeMessage.
        Change Type - set to indicate the type of change - if null this is a delta)

        :return: The ct of this OrderChangeMessage.
        :rtype: str
        """
        return self._ct

    @ct.setter
    def ct(self, ct):
        """
        Sets the ct of this OrderChangeMessage.
        Change Type - set to indicate the type of change - if null this is a delta)

        :param ct: The ct of this OrderChangeMessage.
        :type: str
        """
        allowed_values = ["SUB_IMAGE", "RESUB_DELTA", "HEARTBEAT"]
        if ct not in allowed_values:
            raise ValueError(
                "Invalid value for `ct` ({0}), must be one of {1}"
                .format(ct, allowed_values)
            )

        self._ct = ct

    @property
    def clk(self):
        """
        Gets the clk of this OrderChangeMessage.
        Token value (non-null) should be stored and passed in a MarketSubscriptionMessage to resume subscription (in case of disconnect)

        :return: The clk of this OrderChangeMessage.
        :rtype: str
        """
        return self._clk

    @clk.setter
    def clk(self, clk):
        """
        Sets the clk of this OrderChangeMessage.
        Token value (non-null) should be stored and passed in a MarketSubscriptionMessage to resume subscription (in case of disconnect)

        :param clk: The clk of this OrderChangeMessage.
        :type: str
        """

        self._clk = clk

    @property
    def heartbeat_ms(self):
        """
        Gets the heartbeat_ms of this OrderChangeMessage.
        Heartbeat Milliseconds - the heartbeat rate (may differ from requested: bounds are 500 to 30000)

        :return: The heartbeat_ms of this OrderChangeMessage.
        :rtype: int
        """
        return self._heartbeat_ms

    @heartbeat_ms.setter
    def heartbeat_ms(self, heartbeat_ms):
        """
        Sets the heartbeat_ms of this OrderChangeMessage.
        Heartbeat Milliseconds - the heartbeat rate (may differ from requested: bounds are 500 to 30000)

        :param heartbeat_ms: The heartbeat_ms of this OrderChangeMessage.
        :type: int
        """

        self._heartbeat_ms = heartbeat_ms

    @property
    def pt(self):
        """
        Gets the pt of this OrderChangeMessage.
        Publish Time (in millis since epoch) that the changes were generated

        :return: The pt of this OrderChangeMessage.
        :rtype: int
        """
        return self._pt

    @pt.setter
    def pt(self, pt):
        """
        Sets the pt of this OrderChangeMessage.
        Publish Time (in millis since epoch) that the changes were generated

        :param pt: The pt of this OrderChangeMessage.
        :type: int
        """

        self._pt = pt

    @property
    def oc(self):
        """
        Gets the oc of this OrderChangeMessage.
        OrderMarketChanges - the modifications to account's orders (will be null on a heartbeat

        :return: The oc of this OrderChangeMessage.
        :rtype: list[OrderMarketChange]
        """
        return self._oc

    @oc.setter
    def oc(self, oc):
        """
        Sets the oc of this OrderChangeMessage.
        OrderMarketChanges - the modifications to account's orders (will be null on a heartbeat

        :param oc: The oc of this OrderChangeMessage.
        :type: list[OrderMarketChange]
        """

        self._oc = oc

    @property
    def initial_clk(self):
        """
        Gets the initial_clk of this OrderChangeMessage.
        Token value (non-null) should be stored and passed in a MarketSubscriptionMessage to resume subscription (in case of disconnect)

        :return: The initial_clk of this OrderChangeMessage.
        :rtype: str
        """
        return self._initial_clk

    @initial_clk.setter
    def initial_clk(self, initial_clk):
        """
        Sets the initial_clk of this OrderChangeMessage.
        Token value (non-null) should be stored and passed in a MarketSubscriptionMessage to resume subscription (in case of disconnect)

        :param initial_clk: The initial_clk of this OrderChangeMessage.
        :type: str
        """

        self._initial_clk = initial_clk

    @property
    def conflate_ms(self):
        """
        Gets the conflate_ms of this OrderChangeMessage.
        Conflate Milliseconds - the conflation rate (may differ from that requested if subscription is delayed)

        :return: The conflate_ms of this OrderChangeMessage.
        :rtype: int
        """
        return self._conflate_ms

    @conflate_ms.setter
    def conflate_ms(self, conflate_ms):
        """
        Sets the conflate_ms of this OrderChangeMessage.
        Conflate Milliseconds - the conflation rate (may differ from that requested if subscription is delayed)

        :param conflate_ms: The conflate_ms of this OrderChangeMessage.
        :type: int
        """

        self._conflate_ms = conflate_ms

    @property
    def segment_type(self):
        """
        Gets the segment_type of this OrderChangeMessage.
        Segment Type - if the change is split into multiple segments, this denotes the beginning and end of a change, and segments in between. Will be null if data is not segmented

        :return: The segment_type of this OrderChangeMessage.
        :rtype: str
        """
        return self._segment_type

    @segment_type.setter
    def segment_type(self, segment_type):
        """
        Sets the segment_type of this OrderChangeMessage.
        Segment Type - if the change is split into multiple segments, this denotes the beginning and end of a change, and segments in between. Will be null if data is not segmented

        :param segment_type: The segment_type of this OrderChangeMessage.
        :type: str
        """
        allowed_values = ["SEG_START", "SEG", "SEG_END"]
        if segment_type not in allowed_values:
            raise ValueError(
                "Invalid value for `segment_type` ({0}), must be one of {1}"
                .format(segment_type, allowed_values)
            )

        self._segment_type = segment_type

    @property
    def status(self):
        """
        Gets the status of this OrderChangeMessage.
        Stream status: set to null if the exchange stream data is up to date and 503 if the downstream services are experiencing latencies

        :return: The status of this OrderChangeMessage.
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this OrderChangeMessage.
        Stream status: set to null if the exchange stream data is up to date and 503 if the downstream services are experiencing latencies

        :param status: The status of this OrderChangeMessage.
        :type: int
        """

        self._status = status

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
