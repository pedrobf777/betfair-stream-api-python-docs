# coding: utf-8

"""
    Betfair: Exchange Streaming API

    API to receive streamed updates. This is an ssl socket connection of CRLF delimited json messages (see RequestMessage & ResponseMessage)

    OpenAPI spec version: 1.0.1423
    Contact: bdp@betfair.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class OrderRunnerChange(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, mb=None, smc=None, uo=None, id=None, hc=None, full_image=None, ml=None):
        """
        OrderRunnerChange - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'mb': 'list[list[float]]',
            'smc': 'dict(str, StrategyMatchChange)',
            'uo': 'list[Order]',
            'id': 'int',
            'hc': 'float',
            'full_image': 'bool',
            'ml': 'list[list[float]]'
        }

        self.attribute_map = {
            'mb': 'mb',
            'smc': 'smc',
            'uo': 'uo',
            'id': 'id',
            'hc': 'hc',
            'full_image': 'fullImage',
            'ml': 'ml'
        }

        self._mb = mb
        self._smc = smc
        self._uo = uo
        self._id = id
        self._hc = hc
        self._full_image = full_image
        self._ml = ml

    @property
    def mb(self):
        """
        Gets the mb of this OrderRunnerChange.
        Matched Backs - matched amounts by distinct matched price on the Back side for this runner (selection)

        :return: The mb of this OrderRunnerChange.
        :rtype: list[list[float]]
        """
        return self._mb

    @mb.setter
    def mb(self, mb):
        """
        Sets the mb of this OrderRunnerChange.
        Matched Backs - matched amounts by distinct matched price on the Back side for this runner (selection)

        :param mb: The mb of this OrderRunnerChange.
        :type: list[list[float]]
        """

        self._mb = mb

    @property
    def smc(self):
        """
        Gets the smc of this OrderRunnerChange.
        Strategy Matches - Matched Backs and Matched Lays grouped by strategy reference

        :return: The smc of this OrderRunnerChange.
        :rtype: dict(str, StrategyMatchChange)
        """
        return self._smc

    @smc.setter
    def smc(self, smc):
        """
        Sets the smc of this OrderRunnerChange.
        Strategy Matches - Matched Backs and Matched Lays grouped by strategy reference

        :param smc: The smc of this OrderRunnerChange.
        :type: dict(str, StrategyMatchChange)
        """

        self._smc = smc

    @property
    def uo(self):
        """
        Gets the uo of this OrderRunnerChange.
        Unmatched Orders - orders on this runner (selection) that are not fully matched

        :return: The uo of this OrderRunnerChange.
        :rtype: list[Order]
        """
        return self._uo

    @uo.setter
    def uo(self, uo):
        """
        Sets the uo of this OrderRunnerChange.
        Unmatched Orders - orders on this runner (selection) that are not fully matched

        :param uo: The uo of this OrderRunnerChange.
        :type: list[Order]
        """

        self._uo = uo

    @property
    def id(self):
        """
        Gets the id of this OrderRunnerChange.
        Selection Id - the id of the runner (selection)

        :return: The id of this OrderRunnerChange.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this OrderRunnerChange.
        Selection Id - the id of the runner (selection)

        :param id: The id of this OrderRunnerChange.
        :type: int
        """

        self._id = id

    @property
    def hc(self):
        """
        Gets the hc of this OrderRunnerChange.
        Handicap - the handicap of the runner (selection) (null if not applicable)

        :return: The hc of this OrderRunnerChange.
        :rtype: float
        """
        return self._hc

    @hc.setter
    def hc(self, hc):
        """
        Sets the hc of this OrderRunnerChange.
        Handicap - the handicap of the runner (selection) (null if not applicable)

        :param hc: The hc of this OrderRunnerChange.
        :type: float
        """

        self._hc = hc

    @property
    def full_image(self):
        """
        Gets the full_image of this OrderRunnerChange.


        :return: The full_image of this OrderRunnerChange.
        :rtype: bool
        """
        return self._full_image

    @full_image.setter
    def full_image(self, full_image):
        """
        Sets the full_image of this OrderRunnerChange.


        :param full_image: The full_image of this OrderRunnerChange.
        :type: bool
        """

        self._full_image = full_image

    @property
    def ml(self):
        """
        Gets the ml of this OrderRunnerChange.
        Matched Lays - matched amounts by distinct matched price on the Lay side for this runner (selection)

        :return: The ml of this OrderRunnerChange.
        :rtype: list[list[float]]
        """
        return self._ml

    @ml.setter
    def ml(self, ml):
        """
        Sets the ml of this OrderRunnerChange.
        Matched Lays - matched amounts by distinct matched price on the Lay side for this runner (selection)

        :param ml: The ml of this OrderRunnerChange.
        :type: list[list[float]]
        """

        self._ml = ml

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
