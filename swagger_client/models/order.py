# coding: utf-8

"""
    Betfair: Exchange Streaming API

    API to receive streamed updates. This is an ssl socket connection of CRLF delimited json messages (see RequestMessage & ResponseMessage)

    OpenAPI spec version: 1.0.1423
    Contact: bdp@betfair.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class Order(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, side=None, sv=None, pt=None, ot=None, p=None, sc=None, rc=None, s=None, pd=None, rac=None, md=None, ld=None, sl=None, avp=None, sm=None, rfo=None, id=None, bsp=None, rfs=None, status=None, sr=None):
        """
        Order - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'side': 'str',
            'sv': 'float',
            'pt': 'str',
            'ot': 'str',
            'p': 'float',
            'sc': 'float',
            'rc': 'str',
            's': 'float',
            'pd': 'int',
            'rac': 'str',
            'md': 'int',
            'ld': 'int',
            'sl': 'float',
            'avp': 'float',
            'sm': 'float',
            'rfo': 'str',
            'id': 'str',
            'bsp': 'float',
            'rfs': 'str',
            'status': 'str',
            'sr': 'float'
        }

        self.attribute_map = {
            'side': 'side',
            'sv': 'sv',
            'pt': 'pt',
            'ot': 'ot',
            'p': 'p',
            'sc': 'sc',
            'rc': 'rc',
            's': 's',
            'pd': 'pd',
            'rac': 'rac',
            'md': 'md',
            'ld': 'ld',
            'sl': 'sl',
            'avp': 'avp',
            'sm': 'sm',
            'rfo': 'rfo',
            'id': 'id',
            'bsp': 'bsp',
            'rfs': 'rfs',
            'status': 'status',
            'sr': 'sr'
        }

        self._side = side
        self._sv = sv
        self._pt = pt
        self._ot = ot
        self._p = p
        self._sc = sc
        self._rc = rc
        self._s = s
        self._pd = pd
        self._rac = rac
        self._md = md
        self._ld = ld
        self._sl = sl
        self._avp = avp
        self._sm = sm
        self._rfo = rfo
        self._id = id
        self._bsp = bsp
        self._rfs = rfs
        self._status = status
        self._sr = sr

    @property
    def side(self):
        """
        Gets the side of this Order.
        Side - the side of the order. For Line markets a 'B' bet refers to a SELL line and an 'L' bet refers to a BUY line.

        :return: The side of this Order.
        :rtype: str
        """
        return self._side

    @side.setter
    def side(self, side):
        """
        Sets the side of this Order.
        Side - the side of the order. For Line markets a 'B' bet refers to a SELL line and an 'L' bet refers to a BUY line.

        :param side: The side of this Order.
        :type: str
        """
        allowed_values = ["B", "L"]
        if side not in allowed_values:
            raise ValueError(
                "Invalid value for `side` ({0}), must be one of {1}"
                .format(side, allowed_values)
            )

        self._side = side

    @property
    def sv(self):
        """
        Gets the sv of this Order.
        Size Voided - the amount of the order that has been voided

        :return: The sv of this Order.
        :rtype: float
        """
        return self._sv

    @sv.setter
    def sv(self, sv):
        """
        Sets the sv of this Order.
        Size Voided - the amount of the order that has been voided

        :param sv: The sv of this Order.
        :type: float
        """

        self._sv = sv

    @property
    def pt(self):
        """
        Gets the pt of this Order.
        Persistence Type - whether the order will persist at in play or not (L = LAPSE, P = PERSIST, MOC = Market On Close)

        :return: The pt of this Order.
        :rtype: str
        """
        return self._pt

    @pt.setter
    def pt(self, pt):
        """
        Sets the pt of this Order.
        Persistence Type - whether the order will persist at in play or not (L = LAPSE, P = PERSIST, MOC = Market On Close)

        :param pt: The pt of this Order.
        :type: str
        """
        allowed_values = ["L", "P", "MOC"]
        if pt not in allowed_values:
            raise ValueError(
                "Invalid value for `pt` ({0}), must be one of {1}"
                .format(pt, allowed_values)
            )

        self._pt = pt

    @property
    def ot(self):
        """
        Gets the ot of this Order.
        Order Type - the type of the order (L = LIMIT, MOC = MARKET_ON_CLOSE, LOC = LIMIT_ON_CLOSE)

        :return: The ot of this Order.
        :rtype: str
        """
        return self._ot

    @ot.setter
    def ot(self, ot):
        """
        Sets the ot of this Order.
        Order Type - the type of the order (L = LIMIT, MOC = MARKET_ON_CLOSE, LOC = LIMIT_ON_CLOSE)

        :param ot: The ot of this Order.
        :type: str
        """
        allowed_values = ["L", "LOC", "MOC"]
        if ot not in allowed_values:
            raise ValueError(
                "Invalid value for `ot` ({0}), must be one of {1}"
                .format(ot, allowed_values)
            )

        self._ot = ot

    @property
    def p(self):
        """
        Gets the p of this Order.
        Price - the original placed price of the order. Line markets operate at even-money odds of 2.0. However, price for these markets refers to the line positions available as defined by the markets min-max range and interval steps

        :return: The p of this Order.
        :rtype: float
        """
        return self._p

    @p.setter
    def p(self, p):
        """
        Sets the p of this Order.
        Price - the original placed price of the order. Line markets operate at even-money odds of 2.0. However, price for these markets refers to the line positions available as defined by the markets min-max range and interval steps

        :param p: The p of this Order.
        :type: float
        """

        self._p = p

    @property
    def sc(self):
        """
        Gets the sc of this Order.
        Size Cancelled - the amount of the order that has been cancelled

        :return: The sc of this Order.
        :rtype: float
        """
        return self._sc

    @sc.setter
    def sc(self, sc):
        """
        Sets the sc of this Order.
        Size Cancelled - the amount of the order that has been cancelled

        :param sc: The sc of this Order.
        :type: float
        """

        self._sc = sc

    @property
    def rc(self):
        """
        Gets the rc of this Order.
        Regulator Code - the regulator of the order

        :return: The rc of this Order.
        :rtype: str
        """
        return self._rc

    @rc.setter
    def rc(self, rc):
        """
        Sets the rc of this Order.
        Regulator Code - the regulator of the order

        :param rc: The rc of this Order.
        :type: str
        """

        self._rc = rc

    @property
    def s(self):
        """
        Gets the s of this Order.
        Size - the original placed size of the order

        :return: The s of this Order.
        :rtype: float
        """
        return self._s

    @s.setter
    def s(self, s):
        """
        Sets the s of this Order.
        Size - the original placed size of the order

        :param s: The s of this Order.
        :type: float
        """

        self._s = s

    @property
    def pd(self):
        """
        Gets the pd of this Order.
        Placed Date - the date the order was placed

        :return: The pd of this Order.
        :rtype: int
        """
        return self._pd

    @pd.setter
    def pd(self, pd):
        """
        Sets the pd of this Order.
        Placed Date - the date the order was placed

        :param pd: The pd of this Order.
        :type: int
        """

        self._pd = pd

    @property
    def rac(self):
        """
        Gets the rac of this Order.
        Regulator Auth Code - the auth code returned by the regulator

        :return: The rac of this Order.
        :rtype: str
        """
        return self._rac

    @rac.setter
    def rac(self, rac):
        """
        Sets the rac of this Order.
        Regulator Auth Code - the auth code returned by the regulator

        :param rac: The rac of this Order.
        :type: str
        """

        self._rac = rac

    @property
    def md(self):
        """
        Gets the md of this Order.
        Matched Date - the date the order was matched (null if the order is not matched)

        :return: The md of this Order.
        :rtype: int
        """
        return self._md

    @md.setter
    def md(self, md):
        """
        Sets the md of this Order.
        Matched Date - the date the order was matched (null if the order is not matched)

        :param md: The md of this Order.
        :type: int
        """

        self._md = md

    @property
    def ld(self):
        """
        Gets the ld of this Order.
        Lapsed Date - the date the order was lapsed (null if the order is not lapsed)

        :return: The ld of this Order.
        :rtype: int
        """
        return self._ld

    @ld.setter
    def ld(self, ld):
        """
        Sets the ld of this Order.
        Lapsed Date - the date the order was lapsed (null if the order is not lapsed)

        :param ld: The ld of this Order.
        :type: int
        """

        self._ld = ld

    @property
    def sl(self):
        """
        Gets the sl of this Order.
        Size Lapsed - the amount of the order that has been lapsed

        :return: The sl of this Order.
        :rtype: float
        """
        return self._sl

    @sl.setter
    def sl(self, sl):
        """
        Sets the sl of this Order.
        Size Lapsed - the amount of the order that has been lapsed

        :param sl: The sl of this Order.
        :type: float
        """

        self._sl = sl

    @property
    def avp(self):
        """
        Gets the avp of this Order.
        Average Price Matched - the average price the order was matched at (null if the order is not matched). This value is not meaningful for activity on Line markets and is not guaranteed to be returned or maintained for these markets.

        :return: The avp of this Order.
        :rtype: float
        """
        return self._avp

    @avp.setter
    def avp(self, avp):
        """
        Sets the avp of this Order.
        Average Price Matched - the average price the order was matched at (null if the order is not matched). This value is not meaningful for activity on Line markets and is not guaranteed to be returned or maintained for these markets.

        :param avp: The avp of this Order.
        :type: float
        """

        self._avp = avp

    @property
    def sm(self):
        """
        Gets the sm of this Order.
        Size Matched - the amount of the order that has been matched

        :return: The sm of this Order.
        :rtype: float
        """
        return self._sm

    @sm.setter
    def sm(self, sm):
        """
        Sets the sm of this Order.
        Size Matched - the amount of the order that has been matched

        :param sm: The sm of this Order.
        :type: float
        """

        self._sm = sm

    @property
    def rfo(self):
        """
        Gets the rfo of this Order.
        Order Reference - the customer's order reference for this order (empty string if one was not set)

        :return: The rfo of this Order.
        :rtype: str
        """
        return self._rfo

    @rfo.setter
    def rfo(self, rfo):
        """
        Sets the rfo of this Order.
        Order Reference - the customer's order reference for this order (empty string if one was not set)

        :param rfo: The rfo of this Order.
        :type: str
        """

        self._rfo = rfo

    @property
    def id(self):
        """
        Gets the id of this Order.
        Bet Id - the id of the order

        :return: The id of this Order.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Order.
        Bet Id - the id of the order

        :param id: The id of this Order.
        :type: str
        """

        self._id = id

    @property
    def bsp(self):
        """
        Gets the bsp of this Order.
        BSP Liability - the BSP liability of the order (null if the order is not a BSP order)

        :return: The bsp of this Order.
        :rtype: float
        """
        return self._bsp

    @bsp.setter
    def bsp(self, bsp):
        """
        Sets the bsp of this Order.
        BSP Liability - the BSP liability of the order (null if the order is not a BSP order)

        :param bsp: The bsp of this Order.
        :type: float
        """

        self._bsp = bsp

    @property
    def rfs(self):
        """
        Gets the rfs of this Order.
        Strategy Reference - the customer's strategy reference for this order (empty string if one was not set)

        :return: The rfs of this Order.
        :rtype: str
        """
        return self._rfs

    @rfs.setter
    def rfs(self, rfs):
        """
        Sets the rfs of this Order.
        Strategy Reference - the customer's strategy reference for this order (empty string if one was not set)

        :param rfs: The rfs of this Order.
        :type: str
        """

        self._rfs = rfs

    @property
    def status(self):
        """
        Gets the status of this Order.
        Status - the status of the order (E = EXECUTABLE, EC = EXECUTION_COMPLETE)

        :return: The status of this Order.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this Order.
        Status - the status of the order (E = EXECUTABLE, EC = EXECUTION_COMPLETE)

        :param status: The status of this Order.
        :type: str
        """
        allowed_values = ["E", "EC"]
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def sr(self):
        """
        Gets the sr of this Order.
        Size Remaining - the amount of the order that is remaining unmatched

        :return: The sr of this Order.
        :rtype: float
        """
        return self._sr

    @sr.setter
    def sr(self, sr):
        """
        Sets the sr of this Order.
        Size Remaining - the amount of the order that is remaining unmatched

        :param sr: The sr of this Order.
        :type: float
        """

        self._sr = sr

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
