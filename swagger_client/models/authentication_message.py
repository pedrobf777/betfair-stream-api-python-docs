# coding: utf-8

"""
    Betfair: Exchange Streaming API

    API to receive streamed updates. This is an ssl socket connection of CRLF delimited json messages (see RequestMessage & ResponseMessage)

    OpenAPI spec version: 1.0.1423
    Contact: bdp@betfair.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class AuthenticationMessage(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, op=None, id=None, session=None, app_key=None):
        """
        AuthenticationMessage - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'op': 'str',
            'id': 'int',
            'session': 'str',
            'app_key': 'str'
        }

        self.attribute_map = {
            'op': 'op',
            'id': 'id',
            'session': 'session',
            'app_key': 'appKey'
        }

        self._op = op
        self._id = id
        self._session = session
        self._app_key = app_key

    @property
    def op(self):
        """
        Gets the op of this AuthenticationMessage.
        The operation type

        :return: The op of this AuthenticationMessage.
        :rtype: str
        """
        return self._op

    @op.setter
    def op(self, op):
        """
        Sets the op of this AuthenticationMessage.
        The operation type

        :param op: The op of this AuthenticationMessage.
        :type: str
        """

        self._op = op

    @property
    def id(self):
        """
        Gets the id of this AuthenticationMessage.
        Client generated unique id to link request with response (like json rpc)

        :return: The id of this AuthenticationMessage.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this AuthenticationMessage.
        Client generated unique id to link request with response (like json rpc)

        :param id: The id of this AuthenticationMessage.
        :type: int
        """

        self._id = id

    @property
    def session(self):
        """
        Gets the session of this AuthenticationMessage.


        :return: The session of this AuthenticationMessage.
        :rtype: str
        """
        return self._session

    @session.setter
    def session(self, session):
        """
        Sets the session of this AuthenticationMessage.


        :param session: The session of this AuthenticationMessage.
        :type: str
        """

        self._session = session

    @property
    def app_key(self):
        """
        Gets the app_key of this AuthenticationMessage.


        :return: The app_key of this AuthenticationMessage.
        :rtype: str
        """
        return self._app_key

    @app_key.setter
    def app_key(self, app_key):
        """
        Sets the app_key of this AuthenticationMessage.


        :param app_key: The app_key of this AuthenticationMessage.
        :type: str
        """

        self._app_key = app_key

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
